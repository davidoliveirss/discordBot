import discord
from discord import ui
from discord.ext import commands
from discord.ui import View, Button
from datetime import datetime, timedelta
from logs import get_logger
import secrets
import string
import mysql.connector
from mysql.connector import Error
import asyncio
from cogs.database import create_connection

logger = get_logger()

cooldowns_suport = {}

def update_code_status(user_id, input_code):
    connection = create_connection()
    if connection:
        cursor = connection.cursor()
        try:
            query = """UPDATE verification_codes SET valid=0 WHERE code=%s;"""
            cursor.execute(query, (input_code,))
            connection.commit()
            logger.info(f"Status of code {input_code} updated successfully, used by ({user_id}).")
        except Error as e:
            logger.info(f"Couldn't update the code {input_code} status: {e}")
            return False
        finally:
            cursor.close()
            connection.close()
    return False

def check_verification_code(user_id, input_code):
    connection = create_connection()
    if connection:
        cursor = connection.cursor()
        try:
            query = """SELECT code, time_expire FROM verification_codes WHERE id_user = %s AND valid = TRUE ORDER BY time_created DESC LIMIT 1"""
            cursor.execute(query, (user_id,))
            result = cursor.fetchone()

            if result:
                stored_code, time_expire = result
                if stored_code == input_code and datetime.utcnow() < time_expire:
                    return True
                else:
                    logger.info(f"Code expired or invalid for user {user_id}.")
        except Error as e:
            logger.info(f"Couldn't verify the code: {e}")
        finally:
            cursor.close()
            connection.close()
    return False

def insert_verification_code(user_id, code, time_expire):
    connection = create_connection()
    if connection:
        cursor = connection.cursor()
        try:
            query = """
                INSERT INTO verification_codes (id_user, code, valid, time_created, time_expire)
                VALUES (%s, %s, %s, NOW(), %s)
            """
            cursor.execute(query, (user_id, code, True, time_expire))
            connection.commit()
            logger.info(f"Code {code} generated by ({user_id}).")
        except Error as e:
            logger.info(f"Couldn't insert into db: {e}")
        finally:
            cursor.close()
            connection.close()

def generate_secure_code(user_id):
    characters = string.ascii_letters + string.digits + string.punctuation
    code = ''.join(secrets.choice(characters) for _ in range(6))
    time_expire = datetime.utcnow() + timedelta(minutes=5)
    insert_verification_code(user_id, code, time_expire)
    return code

async def give_role(user, role_id):
    guild = user.guild
    role = discord.utils.get(guild.roles, id=role_id)
    if role:
        await user.add_roles(role)

class suportQuest(ui.Modal, title="Suport system"):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.cooldowns_suport = cooldowns_suport

    name = ui.TextInput(label='Nome', required=False, placeholder="Ex: Alfredo")
    problem = ui.TextInput(label="Problema", required=True, style=discord.TextStyle.paragraph, placeholder="Descreve o teu problema...")

    async def on_submit(self, interaction: discord.Interaction):
        user_id = interaction.user.id

        if user_id in self.cooldowns_suport:
            last_click_time = self.cooldowns_suport[user_id]
            cooldown_time = timedelta(minutes=30)
            time_left = last_click_time + cooldown_time - datetime.now()
            
            if time_left > timedelta(seconds=0):
                await interaction.response.send_message(
                    f"‚ùå Tens de esperar {time_left.seconds // 60} minutos para enviar outro pedido de suporte.",
                    ephemeral=True
                )
                return

        # Atualiza o cooldown antes de processar
        self.cooldowns_suport[user_id] = datetime.now()
        
        problem = self.problem.value
        user_name = self.name.value if self.name.value else "An√¥nimo"

        try:
            channel = interaction.guild.get_channel(1356301294188363976)
            embed = discord.Embed(
                title="‚ùóNovo pedido de ajuda",
                color=discord.Color.orange(),
                timestamp=interaction.created_at
            )
            embed.add_field(name="User name", value=f"```{user_name}```", inline=True)
            embed.add_field(name="User id", value=f"||```{user_id}```||", inline=True)
            embed.add_field(name="Descri√ß√£o do problema", value=f"```{problem[:4000]}```", inline=False)
            embed.set_footer(text="Suport system | Powered by NoLife Dev Team", icon_url="https://cdn.discordapp.com/attachments/1352771477845315685/1352791135730536548/e5b4a8673da2b6cf452368c17dad4fc5.jpg")

            view = SupportButtonView()
            await channel.send(embed=embed, view=view)
            logger.info(f"Suport request sent by ({user_id})")
            await interaction.response.send_message("üì§ Pedido de suporte enviado, aguarda por uma resposta.", ephemeral=True)
            
        except Exception as e:
            logger.error(f"Error processing support request: {e}")
            await interaction.response.send_message("‚ùå Ocorreu um erro ao enviar o pedido de suporte!", ephemeral=True)

class verifyQuest(ui.Modal, title="Verification system"):
    name = ui.TextInput(label='Nome', required=False, placeholder="Ex: User")
    code = ui.TextInput(label='Codigo de verifica√ß√£o', style=discord.TextStyle.short, placeholder="Verifica a tua DM para encontrar o c√≥digo!", required=True, max_length=6)

    async def on_submit(self, interaction: discord.Interaction):
        user_id = interaction.user.id
        input_code = self.code.value
        user = interaction.user

        await interaction.response.defer(ephemeral=True)
        
        if check_verification_code(user_id, input_code):
            update_code_status(user_id, input_code)
            role_id = 1352701856836747264
            await give_role(user, role_id)
            await interaction.followup.send("üéâ Verificado com sucesso, aproveita!", ephemeral=True)
            logger.info(f"User {user_id} verified successfully!")
        else:
            await interaction.followup.send("‚ùå C√≥digo inv√°lido ou expirado! Por favor tenta novamente.", ephemeral=True)

class SupportButtonView(View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="‚úÖ Resolvido", style=discord.ButtonStyle.success, custom_id="support_resolved")
    async def resolved_callback(self, interaction: discord.Interaction, button: Button):
        embed = interaction.message.embeds[0]
        embed.color = discord.Color.green()
        embed.add_field(name="Resolvido por", value=f"{interaction.user.mention}", inline=False)
        await interaction.message.edit(embed=embed, view=None)
        await interaction.response.send_message("‚úÖ Pedido resolvido com sucesso!", ephemeral=True)

class VerificationView(View):
    def __init__(self):
        super().__init__(timeout=None)
        self.cooldowns_verification = {}

    @discord.ui.button(label="üì≤Enviar c√≥digo", style=discord.ButtonStyle.secondary, custom_id="send_code")
    async def send_code_callback(self, interaction: discord.Interaction, button: Button):
        user_id = interaction.user.id

        if user_id in self.cooldowns_verification:
            last_time = self.cooldowns_verification[user_id]
            cooldown = timedelta(minutes=5)
            remaining = (last_time + cooldown) - datetime.now()
            
            if remaining > timedelta(0):
                await interaction.response.send_message(
                    f"‚è≥ Aguarda {remaining.seconds//60} minutos para pedir novo c√≥digo.",
                    ephemeral=True
                )
                return

        try:
            code = generate_secure_code(user_id)
            embed = discord.Embed(
                title="Verifica√ß√£o",
                description="Insere o c√≥digo abaixo no sistema de verifica√ß√£o.",
                color=discord.Color.light_embed()
            )
            embed.add_field(name="C√≥digo:", value=f"||{code}||")
            embed.set_footer(text="Verification system | Powered by NoLife Dev Team", icon_url="https://cdn.discordapp.com/attachments/1352771477845315685/1352791135730536548/e5b4a8673da2b6cf452368c17dad4fc5.jpg")
            
            await interaction.user.send(embed=embed)
            self.cooldowns_verification[user_id] = datetime.now()
            await interaction.response.send_message("üì© C√≥digo enviado para as tuas DMs!", ephemeral=True)
            
        except discord.Forbidden:
            await interaction.response.send_message("‚ùå Ativa as DMs para receberes o c√≥digo!", ephemeral=True)

    @discord.ui.button(label="‚ùîAjuda", style=discord.ButtonStyle.blurple, custom_id="suport")
    async def suport_callback(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(suportQuest())

    @discord.ui.button(label="üìüVerificar", style=discord.ButtonStyle.success, custom_id="verify_button")
    async def verify_callback(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_modal(verifyQuest())

class Verify(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.Cog.listener()
    async def on_ready(self):
        await self.bot.wait_until_ready()
        channel = self.bot.get_channel(1352004544845971487)
        
        if channel:
            await channel.purge()
            embed = discord.Embed(
                title="Verification System",
                description="Bem vindo ao servidor, antes de continuares precisas de te verificar.",
                color=discord.Color.light_embed()
            )
            embed.set_footer(text="Verification system | Powered by NoLife Dev Team", icon_url="https://cdn.discordapp.com/attachments/1352771477845315685/1352791135730536548/e5b4a8673da2b6cf452368c17dad4fc5.jpg")
            
            await channel.send(embed=embed, view=VerificationView())
            self.bot.add_view(VerificationView())
        else:
            logger.error(f"Canal de verifica√ß√£o n√£o encontrado!")

async def setup(bot):
    await bot.add_cog(Verify(bot))
